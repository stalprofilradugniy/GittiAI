
import { GoogleGenAI, Chat, GenerateContentResponse } from "@google/genai";
import { SYSTEM_INSTRUCTION } from '../constants';

const API_KEY = process.env.API_KEY;

let ai: GoogleGenAI | null = null;
if (API_KEY) {
  ai = new GoogleGenAI({ apiKey: API_KEY });
} else {
  console.error("API_KEY –¥–ª—è Gemini –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∂–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.");
}

let chat: Chat | null = null;

function initializeChat(): Chat | null {
  if (!ai) return null;
  return ai.chats.create({
    model: 'gemini-2.5-flash-preview-04-17',
    config: {
      systemInstruction: SYSTEM_INSTRUCTION,
      temperature: 0.7, 
    },
  });
}

// Ensure chat is initialized before first use, or re-initialized if needed.
const ensureChatInitialized = <T,>(operation: () => Promise<T>, fallbackValue: T): Promise<T> => {
  if (!API_KEY || !ai) {
    console.error("API –∫–ª—é—á Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.");
    return Promise.resolve(fallbackValue);
  }
  if (!chat) {
    chat = initializeChat();
    if (!chat) {
      // Still couldn't initialize, possibly due to AI client issue
       return Promise.resolve(fallbackValue);
    }
  }
  return operation();
};


export const getGuitarLessonResponse = async (prompt: string): Promise<string> => {
  return ensureChatInitialized(async () => {
    if(!chat) return "–ì–∏—Ç—Ç–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–∏—Å –ò–ò –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏—Ç–µ –≤–∑—Ä–æ—Å–ª–æ–º—É, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ–≤–µ—Ä–∏–ª API –∫–ª—é—á!";
    try {
      const result: GenerateContentResponse = await chat.sendMessage({ message: prompt });
      return result.text;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API (getGuitarLessonResponse):", error);
      if (error instanceof Error && (error.message.includes('Chat session not found') || error.message.includes('invalid_argument'))) {
          chat = initializeChat(); // Re-initialize chat
          if (!chat) return "–£ –ì–∏—Ç—Ç–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π, –∏ –æ–Ω –Ω–µ —Å–º–æ–≥ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è. –ú–æ–∂–µ—Ç, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ?";
          // Optionally, retry the message or inform the user
          return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –ì–∏—Ç—Ç–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª –Ω–µ–±–æ–ª—å—à–æ–π —Å–±–æ–π, –∏ –æ–Ω –ø–æ—Ç–µ—Ä—è–ª –Ω–∞—à—É –±–µ—Å–µ–¥—É! –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã —Å–ø—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑? –Ø –≤–µ—Å—å –≤–æ –≤–Ω–∏–º–∞–Ω–∏–∏! üëÇ";
      }
      return "–û–π! –ì–∏—Ç—Ç–∏ —Å–ª–∏—à–∫–æ–º —É—Å–µ—Ä–¥–Ω–æ –¥—É–º–∞–ª –∏ –Ω–µ–º–Ω–æ–≥–æ –∑–∞—Å—Ç—Ä—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –º–≥–Ω–æ–≤–µ–Ω–∏–µ! üé∏";
    }
  }, "–ì–∏—Ç—Ç–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–∏—Å –ò–ò –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏—Ç–µ –≤–∑—Ä–æ—Å–ª–æ–º—É, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ–≤–µ—Ä–∏–ª API –∫–ª—é—á!");
};

export const startNewTopic = async (initialPrompt: string): Promise<string> => {
   if (!API_KEY || !ai) {
    return "–ì–∏—Ç—Ç–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–∏—Å –ò–ò –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏—Ç–µ –≤–∑—Ä–æ—Å–ª–æ–º—É, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ–≤–µ—Ä–∏–ª API –∫–ª—é—á!";
  }
  // Create a new chat session for the new topic
  chat = initializeChat();
  if (!chat) {
    return "–£ –ì–∏—Ç—Ç–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π —Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ!";
  }
  // Now send the initial prompt for this new topic using the existing getGuitarLessonResponse logic
  // This effectively uses the new 'chat' instance.
  return getGuitarLessonResponse(initialPrompt);
};