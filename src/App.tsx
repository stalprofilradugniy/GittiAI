import React, { useState, useEffect, useCallback } from 'react';
import { Sidebar } from './components/Sidebar';
import { ChatWindow } from './components/ChatWindow';
import { MessageInput } from './components/MessageInput';
import { PREDEFINED_TOPICS, MODEL_OPTIONS, DEFAULT_MODEL_ID } from './constants';
import { ChatMessage } from './types';
import { getGuitarLessonResponse, startNewTopic, isApiKeyConfigured } from './services/geminiService';
import { GuitarIcon, SparklesIcon, MenuIcon } from './components/Icons';
import { ModelSelector } from './components/ModelSelector';

const App: React.FC = () => {
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [isSidebarOpen, setIsSidebarOpen] = useState<boolean>(window.innerWidth >= 768);
  const [apiConfigured, setApiConfigured] = useState<boolean>(false);
  const [selectedModel, setSelectedModel] = useState<string>(DEFAULT_MODEL_ID);

  const addMessageToList = useCallback((role: 'user' | 'assistant' | 'system', content: string) => {
    setChatMessages(prevMessages => [
      ...prevMessages,
      { id: Date.now().toString() + Math.random().toString(), role, content, timestamp: new Date() },
    ]);
  },[]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏
  useEffect(() => {
    const configured = isApiKeyConfigured();
    setApiConfigured(configured);

    const initialTopic = PREDEFINED_TOPICS.find(topic => topic.id === 'intro');
    if (initialTopic) {
      setChatMessages([]); 
      handleSelectTopic(initialTopic.prompt, initialTopic.title, true, initialTopic.id, selectedModel);

      if (!configured) {
        setError("–ö–ª—é—á Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å AI –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.");
      } else {
        setError(null);
      }
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedModel]); 


  const handleModelChange = (newModelId: string) => {
    if (newModelId !== selectedModel) {
      console.log(`–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${newModelId}`);
      setSelectedModel(newModelId);
      // useEffect –≤—ã—à–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —á–∞—Ç–∞ —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    }
  };

  const handleSendMessage = useCallback(async (userInput: string) => {
    if (!userInput.trim()) return;
    if (!apiConfigured) {
        addMessageToList('assistant', "–ì–∏—Ç—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –ö–ª—é—á Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏—Ç–µ –≤–∑—Ä–æ—Å–ª–æ–º—É. üõ†Ô∏è");
        return;
    }
    addMessageToList('user', userInput);
    setIsLoading(true);
    setError(null);
    try {
      const aiResponse = await getGuitarLessonResponse(userInput, selectedModel);
      addMessageToList('assistant', aiResponse);
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –≤ handleSendMessage:", e);
      const errorMessage = e instanceof Error ? e.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.';
      setError(`–£ –ì–∏—Ç—Ç–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞: ${errorMessage}`);
      addMessageToList('assistant', `–û–π! –£ –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI (Gemini API). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ! üõ†Ô∏è`);
    } finally {
      setIsLoading(false);
    }
  }, [addMessageToList, apiConfigured, selectedModel]);


  const handleSelectTopic = useCallback(async (
    topicPrompt: string, 
    topicTitle: string, 
    isInitialSetup: boolean = false, 
    topicId?: string, // –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –±–æ–ª—å—à–µ–π –≥–∏–±–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
    modelToUse?: string
  ) => {
    const currentModel = modelToUse || selectedModel;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API. –†–∞–∑—Ä–µ—à–∞–µ–º "intro" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.
    if (!apiConfigured && topicId !== 'intro') { 
        addMessageToList('assistant', "–ì–∏—Ç—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç—É —Ç–µ–º—É, —Ç–∞–∫ –∫–∞–∫ –ö–ª—é—á Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏—Ç–µ –≤–∑—Ä–æ—Å–ª–æ–º—É. üõ†Ô∏è");
        setIsLoading(false);
        return;
    }
    
    setIsLoading(true);
    setError(null);
    setChatMessages([]); // –û—á–∏—â–∞–µ–º —á–∞—Ç –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–π —Ç–µ–º—ã –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ API —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω)
    if (!isInitialSetup && apiConfigured) { 
        addMessageToList('assistant', `–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π —É–∑–Ω–∞–µ–º –æ "${topicTitle}"! –ì–∏—Ç—Ç–∏ —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç —ç—Ç–æ... üé∏‚ú®`);
    }

    try {
      // startNewTopic –≤–µ—Ä–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ API –∫–ª—é—á–∞, –µ—Å–ª–∏ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–±–ª–∞–≥–æ–¥–∞—Ä—è isApiKeyConfigured –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–∞)
      const aiResponse = await startNewTopic(topicPrompt, currentModel); 
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ (–∏ API —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω)
      if (!isInitialSetup && apiConfigured) { 
        setChatMessages(prev => prev.filter(m => !m.content.includes(`"${topicTitle}"! –ì–∏—Ç—Ç–∏ —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç —ç—Ç–æ...`)));
      }
      addMessageToList('assistant', aiResponse);

    } catch (e) { 
      console.error(`–û—à–∏–±–∫–∞ –≤ handleSelectTopic –¥–ª—è "${topicTitle}" —Å –º–æ–¥–µ–ª—å—é ${currentModel}:`, e);
      const errorMessage = e instanceof Error ? e.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç–µ–º—ã.';
      setError(`–£ –ì–∏—Ç—Ç–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—á–∞–ª–æ–º —Ç–µ–º—ã "${topicTitle}": ${errorMessage}`);
      addMessageToList('assistant', `–•–º, —è –Ω–µ–º–Ω–æ–≥–æ –∑–∞—Å—Ç—Ä—è–ª(–∞) –Ω–∞ —Ç–µ–º–µ "${topicTitle}". –ú–æ–∂–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –∏–ª–∏ –∑–∞–¥–∞–¥–∏–º –≤–æ–ø—Ä–æ—Å? ü§î`);
    } finally {
      setIsLoading(false);
    }
  }, [addMessageToList, apiConfigured, selectedModel]); // –î–æ–±–∞–≤–ª—è–µ–º selectedModel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã useCallback –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞–ª—Å—è –ø—Ä–∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏

  // Handle window resize for sidebar
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 768) {
        setIsSidebarOpen(true);
      }
    };
    window.addEventListener('resize', handleResize);
    handleResize(); 
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return (
    <div className="flex h-screen max-h-screen bg-gradient-to-br from-yellow-100 via-orange-100 to-amber-200 font-sans antialiased overflow-hidden">
      <Sidebar
        topics={PREDEFINED_TOPICS}
        onSelectTopic={(prompt, title, isInitial, id) => handleSelectTopic(prompt, title, isInitial, id, selectedModel)}
        isOpen={isSidebarOpen}
        setIsOpen={setIsSidebarOpen}
        isApiConfigured={apiConfigured}
      />
      
      <div className="flex flex-col flex-1 h-screen max-h-screen overflow-hidden">
        <header className="bg-white/90 backdrop-blur-md shadow-sm p-3 md:p-4 flex items-center justify-between border-b border-orange-200 flex-shrink-0">
          <div className="flex items-center">
            <button
              onClick={() => setIsSidebarOpen(!isSidebarOpen)}
              className="p-2 rounded-md hover:bg-orange-100 focus:outline-none focus:ring-2 focus:ring-orange-400 mr-2 text-orange-600"
              aria-label={isSidebarOpen ? "–ó–∞–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é" : "–û—Ç–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é"}
              aria-expanded={isSidebarOpen}
              aria-controls="sidebar-nav" // –£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ ID –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ
            >
              <MenuIcon className="w-6 h-6" />
            </button>
            <GuitarIcon className="w-7 h-7 md:w-8 md:h-8 text-orange-500 mr-2" />
            <h1 className="text-xl md:text-2xl font-bold text-orange-600">–ì–∏—Ç—Ç–∏ - AI –£—á–∏—Ç–µ–ª—å –ì–∏—Ç–∞—Ä—ã</h1>
            <SparklesIcon className="w-5 h-5 md:w-6 md:h-6 text-yellow-500 ml-1.5 md:ml-2" />
          </div>
          <div className="ml-auto pl-4">
            <ModelSelector
              selectedModel={selectedModel}
              onChangeModel={handleModelChange}
              disabled={!apiConfigured && MODEL_OPTIONS.length <= 1} // –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ò–õ–ò –µ—Å–ª–∏ –≤—Å–µ–≥–æ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å
            />
          </div>
        </header>

        <ChatWindow messages={chatMessages} isLoading={isLoading} />

        {error && !isLoading && ( 
          <div className="p-2 md:p-3 bg-red-100 text-red-700 text-xs md:text-sm border-t border-red-200 flex-shrink-0" role="alert">
            <strong>–û—à–∏–±–∫–∞:</strong> {error}
          </div>
        )}

        <MessageInput onSendMessage={handleSendMessage} isLoading={isLoading || !apiConfigured} />
      </div>
    </div>
  );
};

export default App;