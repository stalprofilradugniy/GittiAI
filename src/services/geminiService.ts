import { GoogleGenAI, Chat, GenerateContentResponse } from "@google/genai";
import { SYSTEM_INSTRUCTION } from '../constants';

const API_KEY = process.env.API_KEY;

let ai: GoogleGenAI | null = null;
const activeChats = new Map<string, Chat>(); // Store active chats by model name

if (API_KEY) {
  try {
    ai = new GoogleGenAI({ apiKey: API_KEY });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GoogleGenAI:", error);
    ai = null; // Ensure ai is null if initialization fails
  }
} else {
  console.warn("API_KEY –¥–ª—è Gemini –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");
}

export const isApiKeyConfigured = (): boolean => {
  return !!API_KEY && !!ai;
};

const getErrorMessageForChatFailure = (isRetry: boolean = false): string => {
  if (!isApiKeyConfigured()) {
    return "–ì–∏—Ç—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –ö–ª—é—á Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏—Ç–µ –≤–∑—Ä–æ—Å–ª–æ–º—É. üõ†Ô∏è";
  }
  if (isRetry) {
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –ì–∏—Ç—Ç–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª –Ω–µ–±–æ–ª—å—à–æ–π —Å–±–æ–π, –∏ –æ–Ω –ø–æ—Ç–µ—Ä—è–ª –Ω–∞—à—É –±–µ—Å–µ–¥—É! –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã —Å–ø—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑? –Ø –≤–µ—Å—å –≤–æ –≤–Ω–∏–º–∞–Ω–∏–∏! üëÇ –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–æ–º Gemini.";
  }
  return "–û–π! –ì–∏—Ç—Ç–∏ —Å–ª–∏—à–∫–æ–º —É—Å–µ—Ä–¥–Ω–æ –¥—É–º–∞–ª –∏ –Ω–µ–º–Ω–æ–≥–æ –∑–∞—Å—Ç—Ä—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –º–≥–Ω–æ–≤–µ–Ω–∏–µ! üé∏";
};

const initializeChatForModel = (modelName: string): Chat | null => {
  if (!ai) return null;
  console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏: ${modelName}`);
  try {
    const chat = ai.chats.create({
      model: modelName,
      config: {
        systemInstruction: SYSTEM_INSTRUCTION,
        temperature: 0.7,
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      },
    });
    activeChats.set(modelName, chat);
    return chat;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}:`, error);
    return null;
  }
};

const getChatForModel = (modelName: string): Chat | null => {
  if (!activeChats.has(modelName)) {
    return initializeChatForModel(modelName);
  }
  return activeChats.get(modelName) || null;
};

export const getGuitarLessonResponse = async (prompt: string, modelName: string): Promise<string> => {
  if (!isApiKeyConfigured()) {
    return getErrorMessageForChatFailure();
  }

  let chat = getChatForModel(modelName);
  if (!chat) {
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç —Å –ì–∏—Ç—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
  }

  try {
    const result: GenerateContentResponse = await chat.sendMessage({ message: prompt });
    return result.text;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API (getGuitarLessonResponse) –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}:`, error);
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
    if (error instanceof Error && (error.message.includes('Chat session not found') || error.message.includes('invalid_argument') || error.message.includes('400'))) {
      console.warn(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: ${error.message}`);
      chat = initializeChatForModel(modelName); // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
      if (!chat) {
        return getErrorMessageForChatFailure(true); // –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±–æ–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
      }
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
      return getErrorMessageForChatFailure(true);
    }
    return getErrorMessageForChatFailure();
  }
};

export const startNewTopic = async (initialPrompt: string, modelName: string): Promise<string> => {
  if (!isApiKeyConfigured()) {
    return getErrorMessageForChatFailure();
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π —Ç–µ–º—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
  const chat = initializeChatForModel(modelName);
  if (!chat) {
    return "–£ –ì–∏—Ç—Ç–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π —Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ!";
  }
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç—Ç–æ–π –Ω–æ–≤–æ–π —Ç–µ–º—ã
  return getGuitarLessonResponse(initialPrompt, modelName);
};